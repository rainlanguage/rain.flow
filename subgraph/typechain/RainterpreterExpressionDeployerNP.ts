/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type RainterpreterExpressionDeployerConstructionConfigStruct = {
  interpreter: AddressLike;
  store: AddressLike;
  authoringMeta: BytesLike;
};

export type RainterpreterExpressionDeployerConstructionConfigStructOutput = [
  interpreter: string,
  store: string,
  authoringMeta: string
] & { interpreter: string; store: string; authoringMeta: string };

export interface RainterpreterExpressionDeployerNPInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authoringMetaHash"
      | "buildParseMeta"
      | "deployExpression"
      | "iInterpreter"
      | "iStore"
      | "integrityCheck"
      | "integrityFunctionPointers"
      | "parse"
      | "parseMeta"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DISpair" | "ExpressionAddress" | "NewExpression"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authoringMetaHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buildParseMeta",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployExpression",
    values: [BytesLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "iInterpreter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "iStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "integrityCheck",
    values: [BytesLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "integrityFunctionPointers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "parse", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "parseMeta", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "authoringMetaHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildParseMeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployExpression",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iInterpreter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "iStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "integrityCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrityFunctionPointers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parseMeta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace DISpairEvent {
  export type InputTuple = [
    sender: AddressLike,
    deployer: AddressLike,
    interpreter: AddressLike,
    store: AddressLike,
    opMeta: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    deployer: string,
    interpreter: string,
    store: string,
    opMeta: string
  ];
  export interface OutputObject {
    sender: string;
    deployer: string;
    interpreter: string;
    store: string;
    opMeta: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExpressionAddressEvent {
  export type InputTuple = [sender: AddressLike, expression: AddressLike];
  export type OutputTuple = [sender: string, expression: string];
  export interface OutputObject {
    sender: string;
    expression: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewExpressionEvent {
  export type InputTuple = [
    sender: AddressLike,
    bytecode: BytesLike,
    constants: BigNumberish[],
    minOutputs: BigNumberish[]
  ];
  export type OutputTuple = [
    sender: string,
    bytecode: string,
    constants: bigint[],
    minOutputs: bigint[]
  ];
  export interface OutputObject {
    sender: string;
    bytecode: string;
    constants: bigint[];
    minOutputs: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RainterpreterExpressionDeployerNP extends BaseContract {
  connect(runner?: ContractRunner | null): RainterpreterExpressionDeployerNP;
  waitForDeployment(): Promise<this>;

  interface: RainterpreterExpressionDeployerNPInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authoringMetaHash: TypedContractMethod<[], [string], "view">;

  buildParseMeta: TypedContractMethod<
    [authoringMeta: BytesLike],
    [string],
    "view"
  >;

  deployExpression: TypedContractMethod<
    [
      bytecode: BytesLike,
      constants: BigNumberish[],
      minOutputs: BigNumberish[]
    ],
    [[string, string, string]],
    "nonpayable"
  >;

  iInterpreter: TypedContractMethod<[], [string], "view">;

  iStore: TypedContractMethod<[], [string], "view">;

  integrityCheck: TypedContractMethod<
    [
      bytecode: BytesLike,
      constants: BigNumberish[],
      minOutputs: BigNumberish[]
    ],
    [void],
    "view"
  >;

  integrityFunctionPointers: TypedContractMethod<[], [string], "view">;

  parse: TypedContractMethod<[data: BytesLike], [[string, bigint[]]], "view">;

  parseMeta: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId_: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authoringMetaHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buildParseMeta"
  ): TypedContractMethod<[authoringMeta: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "deployExpression"
  ): TypedContractMethod<
    [
      bytecode: BytesLike,
      constants: BigNumberish[],
      minOutputs: BigNumberish[]
    ],
    [[string, string, string]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "iInterpreter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "iStore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "integrityCheck"
  ): TypedContractMethod<
    [
      bytecode: BytesLike,
      constants: BigNumberish[],
      minOutputs: BigNumberish[]
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "integrityFunctionPointers"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "parse"
  ): TypedContractMethod<[data: BytesLike], [[string, bigint[]]], "view">;
  getFunction(
    nameOrSignature: "parseMeta"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId_: BytesLike], [boolean], "view">;

  getEvent(
    key: "DISpair"
  ): TypedContractEvent<
    DISpairEvent.InputTuple,
    DISpairEvent.OutputTuple,
    DISpairEvent.OutputObject
  >;
  getEvent(
    key: "ExpressionAddress"
  ): TypedContractEvent<
    ExpressionAddressEvent.InputTuple,
    ExpressionAddressEvent.OutputTuple,
    ExpressionAddressEvent.OutputObject
  >;
  getEvent(
    key: "NewExpression"
  ): TypedContractEvent<
    NewExpressionEvent.InputTuple,
    NewExpressionEvent.OutputTuple,
    NewExpressionEvent.OutputObject
  >;

  filters: {
    "DISpair(address,address,address,address,bytes)": TypedContractEvent<
      DISpairEvent.InputTuple,
      DISpairEvent.OutputTuple,
      DISpairEvent.OutputObject
    >;
    DISpair: TypedContractEvent<
      DISpairEvent.InputTuple,
      DISpairEvent.OutputTuple,
      DISpairEvent.OutputObject
    >;

    "ExpressionAddress(address,address)": TypedContractEvent<
      ExpressionAddressEvent.InputTuple,
      ExpressionAddressEvent.OutputTuple,
      ExpressionAddressEvent.OutputObject
    >;
    ExpressionAddress: TypedContractEvent<
      ExpressionAddressEvent.InputTuple,
      ExpressionAddressEvent.OutputTuple,
      ExpressionAddressEvent.OutputObject
    >;

    "NewExpression(address,bytes,uint256[],uint256[])": TypedContractEvent<
      NewExpressionEvent.InputTuple,
      NewExpressionEvent.OutputTuple,
      NewExpressionEvent.OutputObject
    >;
    NewExpression: TypedContractEvent<
      NewExpressionEvent.InputTuple,
      NewExpressionEvent.OutputTuple,
      NewExpressionEvent.OutputObject
    >;
  };
}
